description = "gRPC: Netty"
dependencies {
    compile project(':grpc-core'),
            libraries.netty,
            libraries.netty_proxy_handler

    // Tests depend on base class defined by core module.
    testCompile project(':grpc-core').sourceSets.test.output,
                project(':grpc-testing')
    testRuntime libraries.netty_tcnative
    signature "org.codehaus.mojo.signature:java17:+@signature"
}

[compileJava, compileTestJava].each() {
  // Netty retuns a lot of futures that we mostly don't care about.
  it.options.compilerArgs += ["-Xep:FutureReturnValueIgnored:OFF"]
}

javadoc.options.links 'http://netty.io/4.1/api/'

project.sourceSets {
    main {
        java {
            srcDir "${projectDir}/third_party/netty/java"
        }
    }
}

class LoadTest extends Test{
  private numberOfClients = 300

  public LoadTest(){
    super()
    setTestNameIncludePatterns(
        ['io.grpc.netty.NettyServerHandlerTest.maxConnectionAge_goAwaySent',
        'io.grpc.netty.NettyServerHandlerTest.maxConnectionAgeGrace_channelStillOpenDuringGracePeriod',
        'io.grpc.netty.NettyServerHandlerTest.maxConnectionAgeGrace_channelClosedAfterGracePeriod'])
  }
  public FileTree getCandidateClassFiles() {
    FileTree candidateTimes = super.getCandidateClassFiles()
    for(int client  = 1; client<numberOfClients;client++){
      candidateTimes = candidateTimes + super.getCandidateClassFiles()
    }
    return candidateTimes
  }

}

task loadTest(type:LoadTest){
}

test.dependsOn loadTest
