// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/service_config.proto

package io.grpc.serviceconfig;

public interface MethodConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.MethodConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>repeated .grpc.MethodConfig.Name name = 1;</code>
   */
  java.util.List<io.grpc.serviceconfig.MethodConfig.Name> 
      getNameList();
  /**
   * <code>repeated .grpc.MethodConfig.Name name = 1;</code>
   */
  io.grpc.serviceconfig.MethodConfig.Name getName(int index);
  /**
   * <code>repeated .grpc.MethodConfig.Name name = 1;</code>
   */
  int getNameCount();
  /**
   * <code>repeated .grpc.MethodConfig.Name name = 1;</code>
   */
  java.util.List<? extends io.grpc.serviceconfig.MethodConfig.NameOrBuilder> 
      getNameOrBuilderList();
  /**
   * <code>repeated .grpc.MethodConfig.Name name = 1;</code>
   */
  io.grpc.serviceconfig.MethodConfig.NameOrBuilder getNameOrBuilder(
      int index);

  /**
   * <pre>
   * Whether RPCs sent to this method should wait until the connection is
   * ready by default. If false, the RPC will abort immediately if there is
   * a transient failure connecting to the server. Otherwise, gRPC will
   * attempt to connect until the deadline is exceeded.
   * The value specified via the gRPC client API will override the value
   * set here. However, note that setting the value in the client API will
   * also affect transient errors encountered during name resolution, which
   * cannot be caught by the value here, since the service config is
   * obtained by the gRPC client via name resolution.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue wait_for_ready = 2;</code>
   */
  boolean hasWaitForReady();
  /**
   * <pre>
   * Whether RPCs sent to this method should wait until the connection is
   * ready by default. If false, the RPC will abort immediately if there is
   * a transient failure connecting to the server. Otherwise, gRPC will
   * attempt to connect until the deadline is exceeded.
   * The value specified via the gRPC client API will override the value
   * set here. However, note that setting the value in the client API will
   * also affect transient errors encountered during name resolution, which
   * cannot be caught by the value here, since the service config is
   * obtained by the gRPC client via name resolution.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue wait_for_ready = 2;</code>
   */
  com.google.protobuf.BoolValue getWaitForReady();
  /**
   * <pre>
   * Whether RPCs sent to this method should wait until the connection is
   * ready by default. If false, the RPC will abort immediately if there is
   * a transient failure connecting to the server. Otherwise, gRPC will
   * attempt to connect until the deadline is exceeded.
   * The value specified via the gRPC client API will override the value
   * set here. However, note that setting the value in the client API will
   * also affect transient errors encountered during name resolution, which
   * cannot be caught by the value here, since the service config is
   * obtained by the gRPC client via name resolution.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue wait_for_ready = 2;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getWaitForReadyOrBuilder();

  /**
   * <pre>
   * The default timeout in seconds for RPCs sent to this method. This can be
   * overridden in code. If no reply is received in the specified amount of
   * time, the request is aborted and a DEADLINE_EXCEEDED error status
   * is returned to the caller.
   * The actual deadline used will be the minimum of the value specified here
   * and the value set by the application via the gRPC client API.  If either
   * one is not set, then the other will be used.  If neither is set, then the
   * request has no deadline.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 3;</code>
   */
  boolean hasTimeout();
  /**
   * <pre>
   * The default timeout in seconds for RPCs sent to this method. This can be
   * overridden in code. If no reply is received in the specified amount of
   * time, the request is aborted and a DEADLINE_EXCEEDED error status
   * is returned to the caller.
   * The actual deadline used will be the minimum of the value specified here
   * and the value set by the application via the gRPC client API.  If either
   * one is not set, then the other will be used.  If neither is set, then the
   * request has no deadline.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 3;</code>
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * The default timeout in seconds for RPCs sent to this method. This can be
   * overridden in code. If no reply is received in the specified amount of
   * time, the request is aborted and a DEADLINE_EXCEEDED error status
   * is returned to the caller.
   * The actual deadline used will be the minimum of the value specified here
   * and the value set by the application via the gRPC client API.  If either
   * one is not set, then the other will be used.  If neither is set, then the
   * request has no deadline.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * The maximum allowed payload size for an individual request or object in a
   * stream (client-&gt;server) in bytes. The size which is measured is the
   * serialized payload after per-message compression (but before stream
   * compression) in bytes. This applies both to streaming and non-streaming
   * requests.
   * The actual value used is the minumum of the value specified here and the
   * value set by the application via the gRPC client API.  If either one is
   * not set, then the other will be used.  If neither is set, then the
   * built-in default is used.
   * If a client attempts to send an object larger than this value, it will not
   * be sent and the client will see a ClientError.
   * Note that 0 is a valid value, meaning that the request message
   * must be empty.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_request_message_bytes = 4;</code>
   */
  boolean hasMaxRequestMessageBytes();
  /**
   * <pre>
   * The maximum allowed payload size for an individual request or object in a
   * stream (client-&gt;server) in bytes. The size which is measured is the
   * serialized payload after per-message compression (but before stream
   * compression) in bytes. This applies both to streaming and non-streaming
   * requests.
   * The actual value used is the minumum of the value specified here and the
   * value set by the application via the gRPC client API.  If either one is
   * not set, then the other will be used.  If neither is set, then the
   * built-in default is used.
   * If a client attempts to send an object larger than this value, it will not
   * be sent and the client will see a ClientError.
   * Note that 0 is a valid value, meaning that the request message
   * must be empty.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_request_message_bytes = 4;</code>
   */
  com.google.protobuf.UInt32Value getMaxRequestMessageBytes();
  /**
   * <pre>
   * The maximum allowed payload size for an individual request or object in a
   * stream (client-&gt;server) in bytes. The size which is measured is the
   * serialized payload after per-message compression (but before stream
   * compression) in bytes. This applies both to streaming and non-streaming
   * requests.
   * The actual value used is the minumum of the value specified here and the
   * value set by the application via the gRPC client API.  If either one is
   * not set, then the other will be used.  If neither is set, then the
   * built-in default is used.
   * If a client attempts to send an object larger than this value, it will not
   * be sent and the client will see a ClientError.
   * Note that 0 is a valid value, meaning that the request message
   * must be empty.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_request_message_bytes = 4;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxRequestMessageBytesOrBuilder();

  /**
   * <pre>
   * The maximum allowed payload size for an individual response or object in a
   * stream (server-&gt;client) in bytes. The size which is measured is the
   * serialized payload after per-message compression (but before stream
   * compression) in bytes. This applies both to streaming and non-streaming
   * requests.
   * The actual value used is the minumum of the value specified here and the
   * value set by the application via the gRPC client API.  If either one is
   * not set, then the other will be used.  If neither is set, then the
   * built-in default is used.
   * If a server attempts to send an object larger than this value, it will not
   * be sent, and a ServerError will be sent to the client instead.
   * Note that 0 is a valid value, meaning that the response message
   * must be empty.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_response_message_bytes = 5;</code>
   */
  boolean hasMaxResponseMessageBytes();
  /**
   * <pre>
   * The maximum allowed payload size for an individual response or object in a
   * stream (server-&gt;client) in bytes. The size which is measured is the
   * serialized payload after per-message compression (but before stream
   * compression) in bytes. This applies both to streaming and non-streaming
   * requests.
   * The actual value used is the minumum of the value specified here and the
   * value set by the application via the gRPC client API.  If either one is
   * not set, then the other will be used.  If neither is set, then the
   * built-in default is used.
   * If a server attempts to send an object larger than this value, it will not
   * be sent, and a ServerError will be sent to the client instead.
   * Note that 0 is a valid value, meaning that the response message
   * must be empty.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_response_message_bytes = 5;</code>
   */
  com.google.protobuf.UInt32Value getMaxResponseMessageBytes();
  /**
   * <pre>
   * The maximum allowed payload size for an individual response or object in a
   * stream (server-&gt;client) in bytes. The size which is measured is the
   * serialized payload after per-message compression (but before stream
   * compression) in bytes. This applies both to streaming and non-streaming
   * requests.
   * The actual value used is the minumum of the value specified here and the
   * value set by the application via the gRPC client API.  If either one is
   * not set, then the other will be used.  If neither is set, then the
   * built-in default is used.
   * If a server attempts to send an object larger than this value, it will not
   * be sent, and a ServerError will be sent to the client instead.
   * Note that 0 is a valid value, meaning that the response message
   * must be empty.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_response_message_bytes = 5;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxResponseMessageBytesOrBuilder();

  /**
   * <code>.grpc.MethodConfig.RetryPolicy retry_policy = 6;</code>
   */
  boolean hasRetryPolicy();
  /**
   * <code>.grpc.MethodConfig.RetryPolicy retry_policy = 6;</code>
   */
  io.grpc.serviceconfig.MethodConfig.RetryPolicy getRetryPolicy();
  /**
   * <code>.grpc.MethodConfig.RetryPolicy retry_policy = 6;</code>
   */
  io.grpc.serviceconfig.MethodConfig.RetryPolicyOrBuilder getRetryPolicyOrBuilder();

  /**
   * <code>.grpc.MethodConfig.HedgingPolicy hedging_policy = 7;</code>
   */
  boolean hasHedgingPolicy();
  /**
   * <code>.grpc.MethodConfig.HedgingPolicy hedging_policy = 7;</code>
   */
  io.grpc.serviceconfig.MethodConfig.HedgingPolicy getHedgingPolicy();
  /**
   * <code>.grpc.MethodConfig.HedgingPolicy hedging_policy = 7;</code>
   */
  io.grpc.serviceconfig.MethodConfig.HedgingPolicyOrBuilder getHedgingPolicyOrBuilder();

  public io.grpc.serviceconfig.MethodConfig.RetryOrHedgingPolicyCase getRetryOrHedgingPolicyCase();
}
