package io.grpc;

/**
 * TODO: Insert description here. (generated by notcarl)
 */
public final class CoreThread {

  public abstract static class CoreRunnable implements Runnable {
    @Override
    public final void run() {
      enter();
      try {
        coreRun();
      } finally {
        exit();
      }
    }

    protected abstract void coreRun();
  }

  private static final ThreadLocal<Integer> inTransport = new ThreadLocal<Integer>() {
    @Override
    protected Integer initialValue() {
      return 0;
    }
  };

  public static void enter() {
    inTransport.set(inTransport.get() + 1);
  }

  public static void exit() {
    int current = inTransport.get();
    if (current <= 0) {
      throw new RuntimeException("exit() called without corresponding enter()");
    } else if (current == 1) {
      inTransport.remove();
    } else {
      inTransport.set(current - 1);
    }
  }

  public static void assertTransport() {
    if (inTransport.get() == 0) {
      throw new AssertionError("Expected to be in a transport thread");
    }
  }

  public static void assertApplication() {
    if (inTransport.get() != 0) {
      throw new AssertionError("Expected to be in an application thread");
    }
  }
}

