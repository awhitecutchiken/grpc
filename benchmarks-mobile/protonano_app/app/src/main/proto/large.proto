// Copyright 2016, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";
package benchmarks;

option java_multiple_files = true;
option java_package = "io.grpc.benchmarks";
option java_outer_classname = "LargeProtos";

message Thing1 {
    int32 int1 = 1;
    int32 int2 = 2;
    int32 int3 = 3;
    float float1 = 4;
    float float2 = 5;
    float float3 = 6;
    string string1 = 7;
    string string2 = 8;
    string string3 = 9;
    bool bool1 = 11;
    bool bool2 = 12;
    bool bool3 = 13;
    double double1 = 14;
    double double2 = 15;
    double double3 = 16;

    repeated Thing2 things2 = 10;

    message Thing2 {
        int32 int1 = 1;
        int32 int2 = 2;
        int32 int3 = 3;
        float float1 = 4;
        float float2 = 5;
        float float3 = 6;
        string string1 = 7;
        string string2 = 8;
        string string3 = 9;
        bool bool1 = 11;
        bool bool2 = 12;
        bool bool3 = 13;
        double double1 = 14;
        double double2 = 15;
        double double3 = 16;
        EnumType type = 17;
        enum EnumType {
            VALUE0 = 0;
            VALUE1 = 1;
            VALUE2 = 2;
            VALUE3 = 3;
            VALUE4 = 4;
            VALUE5 = 5;
        }

        repeated Thing3 things3 = 10;

        message Thing3 {
            int32 int1 = 1;
            int32 int2 = 2;
            int32 int3 = 3;
            float float1 = 4;
            float float2 = 5;
            float float3 = 6;
            string string1 = 7;
            string string2 = 8;
            string string3 = 9;
            bool bool1 = 11;
            bool bool2 = 12;
            bool bool3 = 13;
            double double1 = 14;
            double double2 = 15;
            double double3 = 16;
        }
    }
}

message Things {
    int32 int1 = 1;
    int32 int2 = 2;
    int32 int3 = 3;
    float float1 = 4;
    float float2 = 5;
    float float3 = 6;
    string string1 = 7;
    string string2 = 8;
    string string3 = 9;
    bool bool1 = 11;
    bool bool2 = 12;
    bool bool3 = 13;
    double double1 = 14;
    double double2 = 15;
    double double3 = 16;
    repeated Thing1 things = 10;
}
