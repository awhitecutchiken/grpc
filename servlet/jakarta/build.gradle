plugins {
    id "java-library"
    id "maven-publish"
}

description = "gRPC: Jakarta Servlet"
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Set up classpaths and source directories for different servlet tests
configurations {
    jetty11TestImplementation.extendsFrom(testImplementation)
    tomcat10TestImplementation.extendsFrom(testImplementation)
    undertowTestImplementation.extendsFrom(testImplementation)
}

sourceSets {
    undertowTest {
        java {
            include '**/Undertow*.java'
        }
    }
    tomcat10Test {
        java {
            include '**/Tomcat*.java'
        }
    }
    jetty11Test {
        java {
            include '**/Jetty*.java'
        }
    }
}

// Mechanically transform sources from grpc-servlet to use the corrected packages
def migrate(String name, String inputDir, SourceSet... sourceSets) {
    def outputDir = layout.buildDirectory.dir('generated/sources/jakarta-' + name)
    sourceSets.each { it.java.srcDir outputDir }
    return tasks.register('migrateSources' + name.capitalize(), Sync) { task ->
        from(inputDir)
        into(outputDir)
        exclude '**/jetty/*'
        filter { String line ->
            // if in the main sources, remove all Jetty lines - must be skipped for tests
            if (name.equals('main') && line.contains('Jetty')) {
                return ''
            }
            return line.replaceAll('javax\\.servlet', 'jakarta.servlet')
        }
    }
}

compileJava.dependsOn migrate('main', '../src/main/java', sourceSets.main);
def migrateTests = migrate('test', '../src/test/java', sourceSets.undertowTest, sourceSets.tomcat10Test, sourceSets.jetty11Test)
compileUndertowTestJava.dependsOn migrateTests;
compileTomcat10TestJava.dependsOn migrateTests;
compileJetty11TestJava.dependsOn migrateTests;

// Disable checkstyle for this project, since it consists only of generated code
checkstyle.ignoreFailures = true

dependencies {
    api project(':grpc-core')
    compileOnly 'jakarta.servlet:jakarta.servlet-api:5.0.0',
            libraries.javax_annotation

    implementation libraries.guava

    testImplementation project(':grpc-stub'),
            project(':grpc-protobuf'),
            project(':grpc-servlet-jakarta'),
            project(':grpc-netty'),
            project(':grpc-testing'),
            project(':grpc-auth'),
            project(':grpc-core').sourceSets.test.output,
            project(':grpc-netty').sourceSets.test.output,
            libraries.junit
    testImplementation(project(':grpc-interop-testing')) {
        // Avoid grpc-netty-shaded dependency
        exclude group: 'io.grpc', module: 'grpc-alts'
        exclude group: 'io.grpc', module: 'grpc-xds'
    }

    tomcat10TestImplementation 'org.apache.tomcat.embed:tomcat-embed-core:10.0.11'

    jetty11TestImplementation "org.eclipse.jetty:jetty-servlet:11.0.6",
            "org.eclipse.jetty.http2:http2-server:11.0.6"

    undertowTestImplementation 'io.undertow:undertow-servlet-jakartaee9:2.2.10.Final'
}

// Set up individual classpaths for each test, to avoid any mismatch,
// and ensure they are only used when supported by the current jvm
check.dependsOn(tasks.register('undertowTest', Test) {
    classpath = sourceSets.undertowTest.runtimeClasspath
    testClassesDirs = sourceSets.undertowTest.output.classesDirs
})
check.dependsOn(tasks.register('tomcat10Test', Test) {
    classpath = sourceSets.tomcat10Test.runtimeClasspath
    testClassesDirs = sourceSets.tomcat10Test.output.classesDirs

    // Provide a temporary directory for tomcat to be deleted after test finishes
    def tomcatTempDir = "$buildDir/tomcat_catalina_base"
    systemProperty 'catalina.base', tomcatTempDir
    doLast {
        file(tomcatTempDir).deleteDir()
    }
})
check.dependsOn(tasks.register('jetty11Test', Test) {
    classpath = sourceSets.jetty11Test.runtimeClasspath
    testClassesDirs = sourceSets.jetty11Test.output.classesDirs
})